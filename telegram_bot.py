import asyncio
import ua.f1
import en.f1_en
import logging

from en.kyrs_english import get_kurs_english
from en.pogoda_5d_english import get_daily_weather_english
from en.pogoda_english import get_weather_english
from en.translator_english import translate_text_english
from en.translator_ua_english import translate_text_ua_english
from en.translator_en_english import translate_text_en_english


from ua.kyrs import get_kurs
from ua.pogoda_5d import get_daily_weather
from ua.pogoda import get_weather
from ua.translator import translate_text
from ua.translator_ua import translate_text_ua
from ua.translator_en import translate_text_en


from googletrans import Translator
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from commands import set_commads
from tokens import TOKEN
from ua.search_ip import search_ipska


dp = Dispatcher()
translator = Translator()
logging.basicConfig(level=logging.INFO)
F.data = None


@dp.message(Command('start'))
async def command_start(message: Message):
    await set_commads(bot)
    await message.answer(hbold(f'–í–∏–±–µ—Ä–∏ –º–æ–≤—É‚¨áÔ∏è'), reply_markup=ua.f1.language_set)
    F.data = "st"


@dp.message(Command('stop'))
async def command_stop(message: Message):
    from time import sleep
    await message.answer(hbold("üò¥"))
    sleep(1)
    await message.answer(hbold("–û –Ω—ñ, –≤–∞—à –ø–∫ –ø—Ä–æ–±—É—î –≤–∑–ª–∞–º–∞—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å. –ù–µ–≥–∞–π–Ω–æ –≤–∏—Ç—è–≥–Ω—ñ—Ç—å –π–æ–≥–æ –∑ —Ä–æ–∑–µ—Ç–∫–∏!!"))
    for i in range(1, 101):
        if F.data == "st":
            break

        await message.answer(hbold(f"–ü—Ä–æ—Ü–µ—Å –≤–∑–ª–æ–º—É {i}%"))
        if 35 >= i <= 50:
            sleep(0.9)
        elif 51 >= i <= 80:
            sleep(0.8)
        elif 81 >= i:
            sleep(0.7)

        if i == 100:
            sleep(0.5)
            await message.answer("üòà")
            await message.answer(hbold("–í–∏ –∑—Ä–æ–±–∏–ª–∏ –≤–µ–ª–∏–∫—É –ø–æ–º–∏–ª–∫—É, –≤–∞—à —Å–≤—ñ—Ç –±—ñ–ª—å—à–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –±—É–¥–µ –∫–æ–ª–∏—à–Ω—ñ–º..."))


@dp.message(Command('ip'))
async def command_ipp(messaga: Message):
    await messaga.answer("–í–≤–µ–¥—ñ—Ç—å Ip:")
    F.data = "sip"

# –æ—Å–Ω–æ–≤–Ω—ñ –∫–∞–ª–±–µ–∫–∏


@dp.callback_query(lambda callback_query: callback_query.data == "ukr_language")
async def ukt_bot(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold(f'–ü—Ä–∏–≤—ñ—Ç, {callback_query.from_user.full_name} –≤–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö —Ñ—É–Ω–∫—Ü—ñ–π‚¨á'), reply_markup=ua.f1.menu)


@dp.callback_query(lambda callback_query: callback_query.data == "en_language")
async def eng_bot(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold(f'Hello, {callback_query.from_user.full_name} select choose one of my features‚¨á'), reply_markup=en.f1_en.menu)


@dp.callback_query(lambda callback_query: callback_query.data == 'support')
async def support(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üê£")
    await callback_query.message.answer(hbold("–ó–Ω–∞–π—à–æ–≤ –±–∞–≥ –∞–±–æ —î –ø–∏—Ç–∞–Ω–Ω—è? –ü–∏—à–∏ –º–µ–Ω—ñ @oket13üòâ"), reply_markup=ua.f1.back)  # –∫–Ω–æ–ø–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞


@dp.callback_query(lambda callback_query: callback_query.data == 'support_english')
async def support(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üê£")
    await callback_query.message.answer(hbold("Found a bug or have a question? Write me @oket13üòâ"), reply_markup=en.f1_en.back)  # –∫–Ω–æ–ø–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∞–Ω–≥–ª –º–æ–≤–∞


@dp.callback_query(lambda callback_query: callback_query.data == 'language_bot')
async def support(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üåê")
    await callback_query.message.answer("–í–∏–±–µ—Ä–∏ –º–æ–≤—É‚¨áÔ∏è", reply_markup=ua.f1.language_set)  # –∫–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏


@dp.callback_query(lambda callback_query: callback_query.data == 'language_bot_english')
async def support(callback_query: types.CallbackQuery):
    await callback_query.message.answer("üåê")
    await callback_query.message.answer("–°hoose language‚¨áÔ∏è", reply_markup=ua.f1.language_set)  # –∫–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É –º–æ–≤–∏ –∞–Ω–≥–ª


@dp.callback_query(lambda callback_query: callback_query.data == 'info')
async def info(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("ü§ñ")
    await callback_query.message.answer(hbold(f"–ö–æ–º–∞–Ω–¥–∏:\n/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/stop - –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞\nFollow my twitch https://www.twitch.tv/oket13 ‚ù§Ô∏è"), reply_markup=ua.f1.back)  # –∫–Ω–æ–ø–∫–∞ —ñ–Ω—Ñ–æ


@dp.callback_query(lambda callback_query: callback_query.data == 'info_english')
async def info(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("ü§ñ")
    await callback_query.message.answer(hbold(f"Command:\n/start - launch bot\n/stop - stop bot\nFollow my twitch https://www.twitch.tv/oket13 ‚ù§Ô∏è"), reply_markup=en.f1_en.back)  # –∫–Ω–æ–ø–∫–∞ —ñ–Ω—Ñ–æ –∞–Ω–≥–ª –º–æ–≤–∞


@dp.callback_query(lambda callback_query: callback_query.data == 'hello')
async def hello_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üñê")
    await callback_query.message.answer(hbold(f'–ü—Ä–∏–≤—ñ—Ç –º—ñ–π –ª—é–±–∏–π/–º–æ—è –ª—é–±–∞, {callback_query.from_user.full_name}‚ù§Ô∏è'), reply_markup=ua.f1.back)  # –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–π—Å—è


@dp.callback_query(lambda callback_query: callback_query.data == 'hello_english')
async def hello_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üñê")
    await callback_query.message.answer(hbold(f'Hello my dear, {callback_query.from_user.full_name}‚ù§Ô∏è'), reply_markup=en.f1_en.back)  # –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–π—Å—è –∞–Ω–≥–ª –º–æ–≤–∞


@dp.callback_query(lambda callback_query: callback_query.data == 'back')
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("–¢–∏ –∑–Ω–æ–≤—É —É –º–µ–Ω—é‚¨á"), reply_markup=ua.f1.menu)  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    F.data = None


@dp.callback_query(lambda callback_query: callback_query.data == 'back_english')
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("You are in the menu again‚¨á"), reply_markup=en.f1_en.menu)  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = None


# –∫–∞–ª–±–µ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞


@dp.callback_query(lambda callback_query: callback_query.data == 'backk')
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("–í–∏–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É‚¨á"), reply_markup=ua.f1.tran_sell)
    F.data = None


@dp.callback_query(lambda callback_query: callback_query.data == 'backk_english')
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("Choose a translation option‚¨á"), reply_markup=en.f1_en.tran_sell)   # –Ω–∞–∑–∞–¥ –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = None


@dp.callback_query(lambda callback_query: callback_query.data == 'tran')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üí¨")
    await callback_query.message.answer(hbold("–í–∏–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É‚¨á"), reply_markup=ua.f1.tran_sell)


@dp.callback_query(lambda callback_query: callback_query.data == 'tran_english')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üí¨")
    await callback_query.message.answer(hbold("Choose a translation option‚¨á"), reply_markup=en.f1_en.tran_sell)  # –∞–Ω–≥–ª –º–æ–≤–∞


@dp.callback_query(lambda callback_query: callback_query.data == 'tran_sell_all')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("–ù–∞–ø–∏—à–∏, —â–æ —Ö–æ—á–µ—à –ø–µ—Ä–µ–∫—Ä–∞—Å—Ç–∏ –≤ —á–∞—Çüìù"), reply_markup=ua.f1.tran_back)
    F.data = "tran"


@dp.callback_query(lambda callback_query: callback_query.data == 'tran_sell_all_english')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("Write what you want to translate in the chatüìù"), reply_markup=en.f1_en.tran_back)  # –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = "tran_english"


@dp.callback_query(lambda callback_query: callback_query.data == 'tran_sell_ua')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("–ù–∞–ø–∏—à–∏, —â–æ —Ö–æ—á–µ—à –ø–µ—Ä–µ–∫—Ä–∞—Å—Ç–∏ –≤ —á–∞—Çüìù"), reply_markup=ua.f1.tran_back)
    F.data = "tran_ua"


@dp.callback_query(lambda callback_query: callback_query.data == 'tran_sell_ua_english')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("Write what you want to translate in the chatüìù"), reply_markup=en.f1_en.tran_back)  # –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = "tran_ua_english"


@dp.callback_query(lambda callback_query: callback_query.data == 'tran_sell_en')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("–ù–∞–ø–∏—à–∏, —â–æ —Ö–æ—á–µ—à –ø–µ—Ä–µ–∫—Ä–∞—Å—Ç–∏ –≤ —á–∞—Çüìù"), reply_markup=ua.f1.tran_back)
    F.data = "tran_en"


@dp.callback_query(lambda callback_query: callback_query.data == 'tran_sell_en_english')
async def callback_trans_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("Write what you want to translate in the chatüìù"), reply_markup=en.f1_en.tran_back)  # –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = "tran_en_english"


# –∫–∞–ª–±–µ–∫–∏ –¥–ª—è –ø–æ–≥–æ–¥–∏


@dp.callback_query(lambda callback_query: callback_query.data == 'wea')
async def show_wea(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("‚õÖ", reply_markup=ua.f1.wea_set)


@dp.callback_query(lambda callback_query: callback_query.data == 'wea_english')
async def show_wea(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("‚õÖ", reply_markup=en.f1_en.wea_set)  # –∞–Ω–≥–ª –º–æ–≤–∞


@dp.callback_query(lambda callback_query: callback_query.data == 'back_wea')
async def show_wea(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("‚õÖ", reply_markup=ua.f1.wea_set)
    F.data = None


@dp.callback_query(lambda callback_query: callback_query.data == 'back_wea_english')
async def show_wea(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("‚õÖ", reply_markup=en.f1_en.wea_set)  # –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = None


@dp.callback_query(lambda callback_query: callback_query.data == 'one_day')
async def show_wea_1day(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏ –º—ñ—Å—Ç–æ —É —è–∫–æ–º—É —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—ÉüèôÔ∏è", reply_markup=ua.f1.back)
    F.data = "wea"


@dp.callback_query(lambda callback_query: callback_query.data == 'one_day_english')
async def show_wea_1day(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("Write the city in which you want to know the weatherüèôÔ∏è", reply_markup=en.f1_en.back)  # –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = "wea_english"


@dp.callback_query(lambda callback_query: callback_query.data == 'five_day')
async def show_wea_5day(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏ –º—ñ—Å—Ç–æ —É —è–∫–æ–º—É —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—ÉüèôÔ∏è", reply_markup=ua.f1.back)
    F.data = "wea5"


@dp.callback_query(lambda callback_query: callback_query.data == 'five_day_english')
async def show_wea_5day(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("Write the city in which you want to know the weatherüèôÔ∏è", reply_markup=en.f1_en.back)  # –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = "wea5_english"


@dp.callback_query(lambda callback_query: callback_query.data == 'wea_menu')
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("–¢–∏ –∑–Ω–æ–≤—É —É –º–µ–Ω—é‚¨á"), reply_markup=ua.f1.menu)


@dp.callback_query(lambda callback_query: callback_query.data == 'wea_menu_english')
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(hbold("You are in the menu again‚¨á"), reply_markup=en.f1_en.menu)  # –∞–Ω–≥–ª –º–æ–≤–∞


# –∫–∞–ª–±–µ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ–∫—Ç–æ—Ä–∞


@dp.callback_query(lambda callback_query: callback_query.data == "conv")
async def show_conv_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üí∏")
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∏–≤–µ–Ω—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —É —Ä—ñ–∑–Ω—ñ –≤–∞–ª—é—Ç–∏üìà", reply_markup=ua.f1.back)
    F.data = "convert"


@dp.callback_query(lambda callback_query: callback_query.data == "conv_english")
async def show_conv_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üí∏")
    await callback_query.message.answer("Write the amount of hryvnias to convert into different currenciesüìà", reply_markup=en.f1_en.back)  # –∞–Ω–≥–ª –º–æ–≤–∞
    F.data = "convert_english"


@dp.message(F.text)
async def text_answer(message: Message) -> None:
    functions_mapping = {
        "tran": translate_text,
        "wea": get_weather,
        "wea5": lambda m: get_daily_weather(m, days=5),
        "tran_ua": translate_text_ua,
        "tran_en": translate_text_en,
        "convert": get_kurs,
        "tran_english": translate_text_english,
        "wea_english": get_weather_english,
        "wea5_english": lambda m: get_daily_weather_english(m, days=5),
        "tran_ua_english": translate_text_ua_english,
        "tran_en_english": translate_text_en_english,
        "convert_english": get_kurs_english,
        "sip": search_ipska
    }

    function = functions_mapping.get(F.data)
    if function:
        await function(message)


async def main() -> None:
    global bot
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
